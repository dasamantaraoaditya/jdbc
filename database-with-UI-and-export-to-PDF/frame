import java.sql.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;

import javax.swing.*;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;

@SuppressWarnings("serial")
public class frame extends JFrame{//to implement JFrames extend them
	
JList<String> jl1,jl2,jl3;
	
	JButton jb1,jb2,jb3,jb4;
	
	JTextArea area3;
	
	public frame(){
		
		super("MySQL DATABASE");//Title of frame
		
		setLayout(new GridLayout(3,4));
		
		JLabel item1=new JLabel("Select Database:");
		
		add(item1);
				
		String [] list1={};
		
		jl1=new JList<String>(list1);
		
		jl1.setVisibleRowCount(3);//visible row
		
		jl1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);//single value selection
		
		add(new JScrollPane(jl1));//scroller for more than 3 rows
		
		jb1=new JButton("Use DataBase");
		
		add(jb1);
		
		JLabel item2=new JLabel("Tabels:");		
		
		add(item2);
		
		String [] list2={};
		
		jl2=new JList<String>(list2);
		
		jl2.setVisibleRowCount(3);
		
		jl2.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		
		add(new JScrollPane(jl2));
		
		jb2=new JButton("Show Tabel Data");
		
		add(jb2);
		
		JLabel item3=new JLabel("Tabel Columns:");		
		
		add(item3);
		
		jl3=new JList<String>(list2);
		
		jl3.setVisibleRowCount(3);
		
		jl3.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		
		add(new JScrollPane(jl3));
		
		jb3=new JButton("Show Columns Data");
		
		add(jb3);
		
		JLabel item4=new JLabel("Columns Data");
		
		add(item4);
		
		area3=new JTextArea("HELLO");
		
		area3.setRows(15);
		
		area3.setColumns(15);
		
		JScrollPane scroll = new JScrollPane (area3);//Scrollpane for text more than 15 rows and 25 columns
		
	    add(scroll); //Object of Jpanel
	    
		jb4=new JButton("Export To PDF");
		
		add(jb4);
	
	}
	
	public void database_connectivity()//method for database connection and update list
	{
		try{
			Class.forName("com.mysql.jdbc.Driver");//checks for database drivers
			
			Connection myconn=DriverManager.getConnection("jdbc:mysql://localhost:3306","root","1234");//1.get a connection to data base
			
			Statement mystmt=myconn.createStatement();//2.create a statement 
			
			ResultSet myres=mystmt.executeQuery("SHOW DATABASES");//3.Execute a sql query
			//4.process the result set
			DefaultListModel<String> db=new DefaultListModel<String>();//default list model
			
			while(myres.next())
			{
				db.addElement(myres.getString("Database"));//appending The Database column values 	
			}
			updatelist1(db);//present database's present in mysql local host
			        
			jb1.addActionListener(new ActionListener() {//when buton jb1 pressed
				 
	            public void actionPerformed(ActionEvent e)
	            {
	            	        	
	            	ResultSet myres2 = null;
					try {
						myres2 = mystmt.executeQuery("SHOW TABLES FROM "+jl1.getSelectedValue());//shows all tables in DB
					} catch (SQLException e2) {
						// TODO Auto-generated catch block
						e2.printStackTrace();
					}
	            		
	            	DefaultListModel<String> tables=new DefaultListModel<String>();
	            	
	            	try {
						while(myres2.next())
						{
							try {
								tables.addElement(myres2.getString("Tables_in_"+jl1.getSelectedValue()));//to get only table names of DB
							} catch (SQLException e1) {
								// TODO Auto-generated catch block
								e1.printStackTrace();
							}   //Follows same pattern as above module for database selection
							
						}
					} catch (SQLException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
	            	updatelist2(tables);//updates tables in jl2
	            	
	            	jb2.addActionListener(new ActionListener() {//when jb2 buton pressed
	       			 
	    	            public void actionPerformed(ActionEvent e)
	    	            {
	    	                //Execute when button is press
	    	            	
	    	            	DefaultListModel<String> columns=new DefaultListModel<String>();
	    	            	
	    	            	ResultSet myres4 = null;
							try {
								myres4 = mystmt.executeQuery("DESC "+jl1.getSelectedValue()+"."+jl2.getSelectedValue());//get all meta data of selected table
							} catch (SQLException e1) {
								// TODO Auto-generated catch block
								e1.printStackTrace();
							}//query gives the meta data of table
	    	    			
	    	            	try {
								while(myres4.next())
								{
									columns.addElement(myres4.getString("Field"));//store table columns into fields array
									//System.out.println();
									updatelist3(columns);
								}
								
							} catch (SQLException e1) {
								// TODO Auto-generated catch block
								e1.printStackTrace();
							}
	    	    			
	    	       jb3.addActionListener(new ActionListener() {//when jb3 buton pressed
	    		       			 
	    	    	        public void actionPerformed(ActionEvent e)
	    	    	            {
	    	    	            	
	    	            	area3.setText("");//set back text in JTestField to "" or NULL	
	    	            	ResultSet myres3 = null;
							try {
								myres3 = mystmt.executeQuery("SELECT "+jl3.getSelectedValue()+" FROM "+jl1.getSelectedValue()+"."+jl2.getSelectedValue());
							} catch (SQLException e1) {
								// TODO Auto-generated catch block
								e1.printStackTrace();
							}//the data present in TABLE is got
	    	            	
	    	            	try {
								while(myres3.next())
								{
									area3.append(myres3.getString(jl3.getSelectedValue()));//the text area is updated with the text data from table
									area3.append("\n");
								}
							} catch (SQLException e1) {
								// TODO Auto-generated catch block
								e1.printStackTrace();
							}	
	    	            }
	    	        });
	            }
	        });    	
	    }
	});     
		 
		 jb4.addActionListener(new ActionListener() {//button EXport PDF
   			 
	            public void actionPerformed(ActionEvent e)
	            {
	            	Document doc=new Document();//document object
	        		
	        		try {
	        			PdfWriter.getInstance(doc, new FileOutputStream(jl3.getSelectedValue()+".pdf"));//new file with column name  
	        			
	        			doc.open();
	        			
	        			Paragraph parag=new Paragraph();//a paragraph object
	        			
	        			parag.add(area3.getText());//adding the Text area content into paragraph object
	        			
	        			doc.add(parag);//adding paragraph to document
	        			
	        			doc.close();
	        		} catch (FileNotFoundException | DocumentException e1) {
	        			// TODO Auto-generated catch block
	        			e1.printStackTrace();
	            }
	           }
	        });
		
			
			
		}
		catch (Exception exe){//all exceptions are handled
			System.out.println("Exception caught");
		}
	}
	
	public void updatelist1(DefaultListModel<String> DB)
	{
		
		jl1.setModel(DB);//update tables
	}
	
	public void updatelist2(DefaultListModel<String> tables)
	{
		
		jl2.setModel(tables);//update data
	}
	
	public void updatelist3(DefaultListModel<String> columns)
	{
		
		jl3.setModel(columns);//update data
	}
}
